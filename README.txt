                             dijkstra README

Introduction
--------------------

This program implements Dijkstra's algorithm for an adjacency list
representation of a graph.  The graph is represented by the Graph class, a basic
implementation of a graph.  The Dijkstra object takes this graph and generates
a HashMap that represents the shortest path between any two nodes in the graph.

Specification
--------------------

This program meets the requirements presented by the assignment.  The Dijkstra
class has a constructor that takes a HashMap used to represent an adjacency list
representation of a graph.  This constructor also takes a String which
corresponds to the starting node.  The constructor successfully implements
Dijkstra's algorithm and produces a public variable called path which is a
HashMap that represents the shortest path between any two nodes in the graph.
Additionally, the DijkstraMethods interface specifies and implements a method
next(), which takes the path HashMap generated by the Dijkstra object and
converts it to an ArrayList representing the shortest path between the starting
node and the specified node.

Errors
--------------------

There are no notable errors in the program that have been found thus far.  The
program has performed as expected for all test cases.

Overview of Code
--------------------

The code itself is quite simple.  The Graph class contains methods to create
and delete nodes and edges, as well as return the distances between nodes.  It
is a basic implementation of a graph, and is designed as to avoid having to deal
with HashMaps directly.

The Dijkstra class consists of a constructor that takes a Graph, and using
Dijkstra's algorithm, generates a HashMap that represents the shortest path
between any two nodes in the graph.  The algorithm works off of two data points,
the distance between any node and the starting node, and the previous node in
the chain.  Sequentially updating these values every pass, one by one,
the algorithm determines the shortest path.

Major Challenges
--------------------

This project was not super challenging, it took about three hours to complete
including this readme and javadoc comments.  I had one infinite loop.

Acknowledgements
--------------------

As always, I would like to thank my family for supporting me while I work on
time-consuming projects such as this, as well as spend many hours in the lab
during build season.